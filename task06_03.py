
__author__ = 'AKV'

"""
2. Во втором массиве сохранить индексы четных элементов первого массива. Например, если дан массив со значениями 
8, 3, 15, 6, 4, 2, то во второй массив надо заполнить значениями 1, 4, 5, 6 (или 0, 3, 4, 5 - если индексация 
начинается с нуля), т.к. именно в этих позициях первого массива стоят четные числа.
"""
import sys


massive_01 = [8, 3, 15, 6, 4, 2]
massive_02 = []
i = 0

while i < len(massive_01):
    if massive_01[i] % 2 == 0:
        massive_02.append(i)
    i += 1

print(f"Массив индексов четных чисел: {massive_02}")



def get_size(x):

    size = sys.getsizeof(x)

    if hasattr(x, '__iter__'):
        if hasattr(x, 'items'):
            for key, value in x.items():
                size += get_size(key)
                size += get_size(value)
        elif not isinstance(x, str):
            for item in x:
                size += get_size(item)

    return size


print(f'size = {get_size(locals())}')

'''
Python 3.7.1 (v3.7.1:260ec2c36a, Oct 20 2018, 14:57:15) [MSC v.1915 64 bit (AMD64)] on win32
Выводы:
Сделал подсчет затрачиваемой памяти в трех задачах.

Видимо из-за простоты задач во всех трех, памяти затрачивается примерно одинаково.
Больше пямяти затрачивается в третьей задаче, из-за наличия массивов.
Больше памяти в задачах выделяется на подсчет занимаемой памяти (функции get_size), поэтому и занимают все три
варианта примерно одинаковый объем памяти. 
'''